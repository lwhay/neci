package org.apache.trevni.avro.update;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.avro.Schema;
import org.apache.avro.Schema.Field;
import org.apache.avro.generic.GenericData;
import org.apache.trevni.ColumnValues;
import org.apache.trevni.TrevniRuntimeException;
import org.apache.trevni.update.FileColumnMetaData;

public class InsertAvroColumnReader{
  private Schema fileSchema;
  private Schema readSchema;
  private GenericData model;

  private List<Integer> columns;
  private ColumnValues[] values;
  private int[] arrayWidths;

  private Map<String,Map<String,Object>> defaults =
    new HashMap<String,Map<String,Object>>();

  public static class Params{
    File file;
    Schema schema;
    GenericData model = GenericData.get();

    public Params(File file) {
      this.file = file;
    }

    public Params setSchema(Schema schema){
      this.schema = schema;
      return this;
    }

    public Params setModel(GenericData model){
      this.model = model;
      return this;
    }
  }

  public InsertAvroColumnReader(Params params) throws IOException{
    this.model = params.model;
    //this.fileschema = Schema.parse()
    this.readSchema = params.schema == null ? fileSchema : params.schema;
    initialize();
  }

  void initialize() throws IOException{
    //建立文件的列名称和列号之间的map
    Map<String,Integer> fileColumnNumbers = new HashMap<String,Integer>();
    int i = 0;
    for(FileColumnMetaData  c : new AvroColumnator(fileSchema).getColumns()){
      fileColumnNumbers.put(c.getName(), i++);
    }

    AvroColumnator readColumnator = new AvroColumnator(readSchema);
    this.arrayWidths = readColumnator.getArrayWidths();
    FileColumnMetaData[] readColumns = readColumnator.getColumns();
    this.values = new ColumnValues[readColumns.length];
    int j = 0;
    for(FileColumnMetaData c : readColumns){
      Integer n = fileColumnNumbers.get(c.getName());
      if(n != null){
        columns.add(n);
      //values[j++] =
      }
    }
    findDefaults(readSchema, fileSchema, true);
  }

  //对每个在读schema中而不在写schema中的fields设置default值，并检查匹配性
  private void findDefaults(Schema read, Schema write, boolean m){
    switch(read.getType()){
      case NULL: case BOOLEAN:
      case INT: case LONG:
      case FLOAT: case DOUBLE:
      case BYTES: case STRING:
      case ENUM: case FIXED:
        if(read.getType() != write.getType())
          throw new TrevniRuntimeException("Type mismatch: "+read+"&"+write);
        break;
      case MAP:
        findDefaults(read.getValueType(), write.getValueType(), m);
        break;
      case ARRAY:
        findDefaults(read.getElementType(), write.getElementType(), m);
        break;
      case UNION:
        for (Schema s : read.getTypes()) {
          Integer index = write.getIndexNamed(s.getFullName());
          if (index == null)
            throw new TrevniRuntimeException("No matching branch: "+s);
          findDefaults(s, write.getTypes().get(index), m);
        }
        break;
      case RECORD:
        boolean x = true;
        for (Field f : read.getFields()) {
          Field g = write.getField(f.name());
          if (g == null)
            setDefault(read, f);
          else{
            x = false;
            findDefaults(f.schema(), g.schema(), x);
          }
        }
        if(x && m){
          for(Field f : write.getFields()){
            switch(f.schema().getType()){
              case ARRAY:
                findDefaults(read,f.schema().getElementType(), x);
                break;
              default: break;
            }
          }
        }
        break;
      default:
        throw new TrevniRuntimeException("Unknown schema: "+read);
    }
  }

  private void setDefault(Schema record, Field f) {
    String recordName = record.getFullName();
    Map<String,Object> recordDefaults = defaults.get(recordName);
    if (recordDefaults == null) {
      recordDefaults = new HashMap<String,Object>();
      defaults.put(recordName, recordDefaults);
    }
    recordDefaults.put(f.name(), model.getDefaultValue(f));
  }
}
